// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUM: Tipos de Arquivo
// ============================================
enum FileType {
  IMAGE
  DOCUMENT
  SPREADSHEET
}

// ============================================
// ENUM: Categorias de Entidade
// ============================================
enum EntityType {
  PRODUCT      // Imagens de produtos
  PROFILE      // Fotos de perfil
  ORDER        // Documentos de pedidos
  INVOICE      // Notas fiscais
  BANNER       // Banners promocionais
  LOGO         // Logos da empresa
  GALLERY      // Galeria geral
  OTHER        // Outros tipos
}

// ============================================
// ENUM: Status do Asset
// ============================================
enum AssetStatus {
  ACTIVE       // Ativo e disponível
  PROCESSING   // Em processamento (thumbnails, etc)
  ARCHIVED     // Arquivado (soft delete)
  DELETED      // Marcado para deleção
}

// ============================================
// TABELA PRINCIPAL: Assets
// ============================================
model Asset {
  // Identificação
  id          String   @id @default(uuid()) @db.VarChar(36)
  
  // Relacionamento Externo
  entityType  EntityType
  entityId    String   @db.VarChar(36) // UUID do cadastro relacionado (Produto, Perfil, etc)
  
  // Metadados do Arquivo
  originalName String  @db.VarChar(255)
  sanitizedName String @db.VarChar(255)
  fileType     FileType
  mimeType     String  @db.VarChar(100)
  fileSize     Int     @db.Int // Tamanho em bytes
  
  // Localização
  basePath     String  @db.VarChar(500)
  
  // Status e Controle
  status       AssetStatus @default(PROCESSING)
  
  // Auditoria
  uploadedAt   DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime? // Soft delete
  
  // Metadados Adicionais (JSON)
  metadata     Json?    // Dados extras: { description, alt, tags, etc }
  
  // Relacionamentos
  versions     AssetVersion[]
  tags         AssetTag[]
  
  // Índices
  @@index([entityType, entityId], name: "idx_entity")
  @@index([fileType, status], name: "idx_type_status")
  @@index([uploadedAt], name: "idx_uploaded")
  @@index([deletedAt], name: "idx_deleted")
  @@map("assets")
}

// ============================================
// TABELA: Versões do Asset (Original, Preview, Thumbnail)
// ============================================
model AssetVersion {
  id          String   @id @default(uuid()) @db.VarChar(36)
  assetId     String   @db.VarChar(36)
  
  // Tipo da Versão
  versionType String   @db.VarChar(50) // 'original', 'preview', 'thumbnail'
  
  // Arquivo
  fileName    String   @db.VarChar(255)
  filePath    String   @db.VarChar(500)
  fileSize    Int      @db.Int
  
  // Dimensões (apenas para imagens)
  width       Int?     @db.Int
  height      Int?     @db.Int
  
  // Status
  isProcessed Boolean  @default(false)
  
  // Auditoria
  createdAt   DateTime @default(now())
  
  // Relacionamento
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  // Índices
  @@index([assetId, versionType], name: "idx_asset_version")
  @@map("asset_versions")
}

// ============================================
// TABELA: Tags dos Assets
// ============================================
model AssetTag {
  id        String   @id @default(uuid()) @db.VarChar(36)
  assetId   String   @db.VarChar(36)
  tag       String   @db.VarChar(100)
  
  createdAt DateTime @default(now())
  
  // Relacionamento
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  // Índices
  @@index([tag], name: "idx_tag")
  @@index([assetId], name: "idx_asset_tag")
  @@unique([assetId, tag], name: "unique_asset_tag")
  @@map("asset_tags")
}

// ============================================
// TABELA: Logs de Operações
// ============================================
model AssetLog {
  id          String   @id @default(uuid()) @db.VarChar(36)
  assetId     String   @db.VarChar(36)
  
  // Operação
  operation   String   @db.VarChar(50) // 'upload', 'download', 'delete', 'update'
  
  // Contexto
  ipAddress   String?  @db.VarChar(45)
  userAgent   String?  @db.VarChar(500)
  metadata    Json?    // Dados extras da operação
  
  // Auditoria
  createdAt   DateTime @default(now())
  
  // Índices
  @@index([assetId], name: "idx_asset_log")
  @@index([operation, createdAt], name: "idx_operation_date")
  @@map("asset_logs")
}

// ============================================
// TABELA: Configurações Globais
// ============================================
model SystemConfig {
  id          String   @id @default(uuid()) @db.VarChar(36)
  
  configKey   String   @unique @db.VarChar(100)
  configValue String   @db.Text
  description String?  @db.VarChar(500)
  
  updatedAt   DateTime @updatedAt
  
  @@map("system_config")
}

